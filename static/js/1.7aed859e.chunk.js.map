{"version":3,"sources":["../../src/utils/isHTMLElement.ts","../../src/constants.ts","../../src/logic/attachEventListeners.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isArray.ts","../../src/utils/isObject.ts","../../src/utils/isKey.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/transformToNestObject.ts","../../src/utils/isUndefined.ts","../../src/utils/filterOutFalsy.ts","../../src/utils/get.ts","../../src/logic/focusOnErrorField.ts","../../src/logic/removeAllEventListeners.ts","../../src/logic/getRadioValue.ts","../../src/utils/isRadioInput.ts","../../src/utils/isFileInput.ts","../../src/utils/isCheckBoxInput.ts","../../src/utils/isMultipleSelect.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getMultipleSelectValue.ts","../../src/utils/isDetached.ts","../../src/utils/isEmptyObject.ts","../../src/utils/isBoolean.ts","../../src/utils/unset.ts","../../src/logic/findRemovedFieldAndRemoveListener.ts","../../src/logic/setFieldArrayDirtyFields.ts","../../src/utils/isString.ts","../../src/utils/isPrimitive.ts","../../src/logic/getFieldsValues.ts","../../src/utils/deepMerge.ts","../../src/utils/deepEqual.ts","../../src/logic/isErrorStateChanged.ts","../../src/utils/isRegex.ts","../../src/logic/getValueAndMessage.ts","../../src/utils/isFunction.ts","../../src/utils/isMessage.ts","../../src/logic/getValidateError.ts","../../src/logic/appendErrors.ts","../../src/logic/validateField.ts","../../src/utils/getPath.ts","../../src/logic/assignWatchFields.ts","../../src/logic/skipValidation.ts","../../src/logic/getFieldArrayParentName.ts","../../src/logic/isNameInFieldArray.ts","../../src/utils/isSelectInput.ts","../../src/utils/onDomRemove.ts","../../src/utils/validationModeChecker.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/useForm.ts","../../src/useFormContext.tsx","../../src/logic/getInputValue.ts","../../src/controller.tsx"],"names":["value","HTMLElement","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","attachEventListeners","shouldAttachChangeEvent","handleChange","ref","isHTMLElement","addEventListener","Array","isArray","isObjectType","isNullOrUndefined","Date","test","input","result","replace","match","mathNumber","mathQuote","originalString","push","set","object","path","index","tempPath","isKey","stringToPath","length","lastIndex","key","newValue","objValue","isObject","isNaN","data","Object","entries","reduce","previous","val","undefined","filter","Boolean","obj","defaultValue","filterOutFalsy","split","isUndefined","fields","fieldErrors","get","field","focus","options","validateWithStateUpdate","removeEventListener","defaultReturn","isValid","option","checked","element","type","defaultResult","validResult","values","map","attributes","getFieldValue","fieldsRef","name","shallowFieldsStateRef","excludeDisabled","current","disabled","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","keys","unset","updatePath","childObject","slice","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isEmptyObject","isBoolean","isSameRef","fieldValue","findRemovedFieldAndRemoveListener","shouldUnregister","forceDelete","fieldRef","isCheckBoxInput","forEach","removeAllEventListeners","setFieldArrayDirtyFields","defaultValues","dirtyFields","parentName","search","output","isString","startsWith","find","deepMerge","target","source","isPrimitive","targetValue","sourceValue","transformToNestObject","deepEqual","object1","object2","isErrorObject","keys1","keys2","includes","val1","val2","isErrorStateChanged","errors","error","validFields","fieldsWithValidation","previousError","RegExp","validationData","isRegex","message","getValidateError","isMessage","validateAllFieldCriteria","types","a","required","maxLength","minLength","min","max","pattern","validate","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","requiredValue","requiredMessage","maxValue","maxMessage","minValue","minMessage","valueNumber","valueAsNumber","parseFloat","exceedMin","valueDate","valueAsDate","maxLengthValue","minLengthValue","inputLength","toString","patternValue","patternMessage","getFieldsValue","validateRef","isFunction","validateError","validationResult","validateFunction","validateResult","getPath","pathWithIndex","getInnerPath","flat","Infinity","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","substring","indexOf","isMatchFieldArrayName","searchName","names","some","onDomRemove","removeFieldEventListenerAndRef","observer","MutationObserver","observe","window","document","childList","subtree","mode","isOnSubmit","isWindowUndefined","isWeb","isProxyEnabled","Proxy","useForm","reValidateMode","resolver","context","shouldFocusError","criteriaMode","React.useRef","fieldArrayDefaultValuesRef","watchFieldsRef","Set","useWatchFieldsRef","useWatchRenderFunctionsRef","fieldsWithValidationRef","validFieldsRef","defaultValuesRef","defaultValuesAtRenderRef","isUnMount","isWatchAllRef","handleChangeRef","resetFieldArrayFunctionRef","contextRef","resolverRef","fieldArrayNamesRef","modeRef","modeChecker","isValidateAllFieldCriteria","React.useState","isDirty","submitCount","touched","isSubmitting","isSubmitSuccessful","formState","setFormState","readFormStateRef","formStateRef","observerRef","updateFormState","React.useCallback","state","shouldRenderBaseOnError","shouldRender","shouldReRender","setFieldValue","rawValue","radioRef","selectRef","checkboxRef","isFormDirty","getValues","updateAndGetDirtyState","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","previousFormIsValid","isInputsValid","every","trigger","Promise","all","setInternalValues","shouldDirty","shouldValidate","setInternalValue","config","has","isFieldWatched","renderWatchedInputs","found","size","getFieldArrayParentName","setValue","setFieldArrayDefaultValues","payload","getFieldsValues","shouldSkipValidation","skipValidation","validateResolver","removeFieldEventListener","clearErrors","inputName","setError","shouldFocus","watchInternal","fieldNames","watchId","combinedDefaultValues","assignWatchFields","watch","unregister","registerFieldRef","validateOptions","fieldRefAndValidationOptions","isRadioOrCheckboxFunction","isFieldArray","isNameInFieldArray","compareRef","currentRef","isEmptyDefaultValue","isEmptyUnmountFields","then","isSelectInput","register","refOrValidationOptions","rules","handleSubmit","onValid","onInvalid","e","preventDefault","persist","fieldError","focusOnErrorField","resetRefs","reset","omitResetState","inputRef","closest","resetFieldArray","React.useEffect","disconnect","commonProps","control","prop","FormContext","React.createContext","displayName","useFormContext","React.useContext","Controller","as","render","onFocus","rest","methods","isNotFieldArray","getInitialValue","setInputStateValue","valueRef","onFocusRef","commonTask","event","getInputValue","registerField","defineProperty","onBlur","onChange","props","React.isValidElement","React.cloneElement","React.createElement"],"mappings":"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","file":"static/js/1.7aed859e.chunk.js","sourcesContent":["export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const VALUE = 'value';\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types';\n\nexport default function attachEventListeners(\n  { ref }: Field,\n  shouldAttachChangeEvent?: boolean,\n  handleChange?: EventListenerOrEventListenerObject,\n): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","export default (value: unknown): value is null | undefined => value == null;\n","export default <T>(value: unknown): value is T[] => Array.isArray(value);\n","import isNullOrUndefined from './isNullOrUndefined';\nimport isArray from './isArray';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","import isArray from './isArray';\n\nexport default (value: [] | string) =>\n  !isArray(value) &&\n  (/^\\w*$/.test(value) ||\n    !/\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/.test(value));\n","export default (input: string): string[] => {\n  const result: string[] = [];\n\n  input.replace(\n    /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g,\n    (\n      match: string,\n      mathNumber: string,\n      mathQuote: string,\n      originalString: string,\n    ): any => {\n      result.push(\n        mathQuote\n          ? originalString.replace(/\\\\(\\\\)?/g, '$1')\n          : mathNumber || match,\n      );\n    },\n  );\n\n  return result;\n};\n","import isObject from './isObject';\nimport isArray from './isArray';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types';\n\nexport default (data: FieldValues): any =>\n  Object.entries(data).reduce(\n    (previous: FieldValues, [key, value]): FieldValues => {\n      if (!isKey(key)) {\n        set(previous, key, value);\n        return previous;\n      }\n\n      return { ...previous, [key]: value };\n    },\n    {},\n  );\n","export default (val: unknown): val is undefined => val === undefined;\n","export default (value: any[]) => value.filter(Boolean);\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport filterOutFalsy from './filterOutFalsy';\n\nexport default (obj: any, path: string, defaultValue?: unknown) => {\n  const result = filterOutFalsy(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import get from '../utils/get';\nimport { FieldErrors, FieldRefs } from '../types';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus) {\n          field.ref.focus();\n\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import isArray from '../utils/isArray';\nimport { RadioOrCheckboxOption } from '../types';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: '',\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isArray from '../utils/isArray';\nimport isUndefined from '../utils/isUndefined';\nimport { RadioOrCheckboxOption } from '../types';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || value === ''\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport get from '../utils/get';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  shallowFieldsStateRef?: React.MutableRefObject<Partial<FieldValues>>,\n  excludeDisabled?: boolean,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value, disabled },\n      ref,\n    } = field;\n\n    if (disabled && excludeDisabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return value;\n  }\n\n  if (shallowFieldsStateRef) {\n    return get(shallowFieldsStateRef.current, name);\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Ref } from '../types';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isArray from './isArray';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport isBoolean from './isBoolean';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const path = updatePath.slice(0, -1);\n  const length = path.length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef = undefined;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef = undefined;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport set from '../utils/set';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport isArray from '../utils/isArray';\nimport unset from '../utils/unset';\nimport filterOutFalsy from '../utils/filterOutFalsy';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  shallowFieldsStateRef: React.MutableRefObject<FieldValues>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name, type },\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n\n    if (!isUndefined(value)) {\n      set(shallowFieldsStateRef.current, name, value);\n    }\n  }\n\n  if (!type) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldRef) {\n    const { options } = fieldRef;\n\n    if (isArray(options) && options.length) {\n      filterOutFalsy(options).forEach((option, index): void => {\n        const { ref } = option;\n        if ((ref && isDetached(ref) && isSameRef(option, ref)) || forceDelete) {\n          removeAllEventListeners(ref, handleChange);\n          unset(options, `[${index}]`);\n        }\n      });\n\n      if (options && !filterOutFalsy(options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    delete fieldsRef.current[name];\n  }\n}\n","import { get } from '../utils';\nimport isArray from '../utils/isArray';\nimport set from '../utils/set';\n\nexport default function setFieldArrayDirtyFields<\n  T extends U,\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setFieldArrayDirtyFields(\n          values[index][key],\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        get(defaultValues[index] || {}, key) === values[index][key]\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n    !dirtyFields.length &&\n      parentNode &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields.length ? dirtyFields : undefined;\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport isArray from '../utils/isArray';\nimport { deepMerge } from '../utils/deepMerge';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types';\nimport transformToNestObject from './transformToNestObject';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  shallowFieldsStateRef?: React.MutableRefObject<Record<string, any>>,\n  excludeDisabled?: boolean,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n        undefined,\n        excludeDisabled,\n      );\n    }\n  }\n\n  return deepMerge(\n    transformToNestObject({ ...((shallowFieldsStateRef || {}).current || {}) }),\n    transformToNestObject(output),\n  );\n};\n","import isObject from './isObject';\nimport isArray from './isArray';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      if (\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (isArray(targetValue) && isArray(sourceValue))\n      ) {\n        target[key] = deepMerge(targetValue, sourceValue);\n      } else {\n        target[key] = sourceValue;\n      }\n    } catch {}\n  }\n\n  return target;\n}\n","import isObject from '../utils/isObject';\nimport isArray from '../utils/isArray';\n\nexport default function deepEqual(\n  object1: any = [],\n  object2: any = [],\n  isErrorObject?: boolean,\n) {\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    if (!(isErrorObject && ['ref', 'context'].includes(key))) {\n      const val1 = object1[key];\n      const val2 = object2[key];\n\n      if (\n        (isObject(val1) || isArray(val1)) && (isObject(val2) || isArray(val2))\n          ? !deepEqual(val1, val2, isErrorObject)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport deepEqual from '../utils/deepEqual';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldError,\n} from '../types';\n\nexport default function isErrorStateChanged<TFieldValues extends FieldValues>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FieldError | undefined;\n  name: InternalFieldName<TFieldValues>;\n  validFields: FieldNamesMarkedBoolean<TFieldValues>;\n  fieldsWithValidation: FieldNamesMarkedBoolean<TFieldValues>;\n}): boolean {\n  const isValid = isUndefined(error);\n  const previousError = get(errors, name);\n\n  return (\n    (isValid && !!previousError) ||\n    (!isValid && !deepEqual(previousError, error, true)) ||\n    (isValid && get(fieldsWithValidation, name) && !get(validFields, name))\n  );\n}\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule, ValidationValueMessage } from '../types';\n\nconst isValueMessage = (\n  value?: ValidationRule,\n): value is ValidationValueMessage => isObject(value) && !isRegex(value);\n\nexport default (validationData?: ValidationRule) =>\n  isValueMessage(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import { isValidElement } from 'react';\nimport isString from '../utils/isString';\nimport isObject from '../utils/isObject';\nimport { Message } from '../types';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || (isObject(value) && isValidElement(value));\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  InternalFieldErrors,\n} from '../types';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) => {\n  if (validateAllFieldCriteria) {\n    const error = errors[name];\n\n    return {\n      ...error,\n      types: {\n        ...(error && error.types ? error.types : {}),\n        [type]: message || true,\n      },\n    };\n  }\n\n  return {};\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  InternalFieldErrors,\n} from '../types';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { type, value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  shallowFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n): Promise<InternalFieldErrors<TFieldValues>> => {\n  const fields = fieldsRef.current;\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: InternalFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value: requiredValue, message: requiredMessage } = isMessage(\n      required,\n    )\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (requiredValue) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message: requiredMessage,\n        ref: isRadioOrCheckbox\n          ? (((fields[name] as Field).options || [])[0] || {}).ref\n          : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, requiredMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\n    let exceedMax;\n    let exceedMin;\n    const { value: maxValue, message: maxMessage } = getValueAndMessage(max);\n    const { value: minValue, message: minMessage } = getValueAndMessage(min);\n\n    if (type === 'number' || (!type && !isNaN(value))) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxValue)) {\n        exceedMax = valueNumber > maxValue;\n      }\n      if (!isNullOrUndefined(minValue)) {\n        exceedMin = valueNumber < minValue;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxValue)) {\n        exceedMax = valueDate > new Date(maxValue);\n      }\n      if (isString(minValue)) {\n        exceedMin = valueDate < new Date(minValue);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxMessage,\n        minMessage,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const {\n      value: maxLengthValue,\n      message: maxLengthMessage,\n    } = getValueAndMessage(maxLength);\n    const {\n      value: minLengthValue,\n      message: minLengthMessage,\n    } = getValueAndMessage(minLength);\n    const inputLength = value.toString().length;\n    const exceedMax =\n      !isNullOrUndefined(maxLengthValue) && inputLength > maxLengthValue;\n    const exceedMin =\n      !isNullOrUndefined(minLengthValue) && inputLength < minLengthValue;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty) {\n    const { value: patternValue, message: patternMessage } = getValueAndMessage(\n      pattern,\n    );\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message: patternMessage,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(fieldsRef, name, shallowFieldsStateRef);\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isPrimitive from './isPrimitive';\nimport isObject from './isObject';\n\nexport const getPath = <T extends string, U extends object | unknown[]>(\n  path: T,\n  values: U,\n): string[] => {\n  const getInnerPath = <K>(key: K, value: U, isObject?: boolean) => {\n    const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\n    return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\n  };\n\n  return Object.entries(values)\n    .map(([key, value]) => getInnerPath(key, value, isObject(values)))\n    .flat(Infinity) as string[];\n};\n","import get from '../utils/get';\nimport { getPath } from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isArray from '../utils/isArray';\nimport {\n  DeepPartial,\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value;\n\n  watchFields.add(fieldName);\n\n  if (isEmptyObject(fieldValues)) {\n    value = undefined;\n  } else {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || isArray(value)) {\n      getPath(fieldName, value).forEach((name) => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import { FieldValues, InternalFieldName } from '../types';\n\nexport const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}[\\\\d+]`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (\n  names: Set<InternalFieldName<FieldValues>>,\n  name: InternalFieldName<FieldValues>,\n) => [...names].some((current) => isMatchFieldArrayName(name, current));\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import * as React from 'react';\nimport { Field, FieldRefs } from '../types';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove<TFieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  removeFieldEventListenerAndRef: (\n    field: Field | undefined,\n    forceDelete?: boolean,\n  ) => void,\n): MutationObserver {\n  const observer = new MutationObserver((): void => {\n    for (const field of Object.values(fieldsRef.current)) {\n      if (field && field.options) {\n        for (const option of field.options) {\n          if (option && option.ref && isDetached(option.ref)) {\n            removeFieldEventListenerAndRef(field);\n          }\n        }\n      } else if (field && isDetached(field.ref)) {\n        removeFieldEventListenerAndRef(field);\n      }\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport isErrorStateChanged from './logic/isErrorStateChanged';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport deepEqual from './utils/deepEqual';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport onDomRemove from './utils/onDomRemove';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isArray from './utils/isArray';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport isKey from './utils/isKey';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport filterOutFalsy from './utils/filterOutFalsy';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldValue,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  ValidationRules,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  NestedValue,\n  SetValueConfig,\n  ErrorOption,\n  FormState,\n  SubmitErrorHandler,\n  FieldNamesMarkedBoolean,\n  LiteralToPrimitive,\n  DeepPartial,\n  InternalNameSet,\n  DefaultValues,\n  FieldError,\n} from './types';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isWeb =\n  typeof document !== UNDEFINED &&\n  !isWindowUndefined &&\n  !isUndefined(window.HTMLElement);\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as UnpackNestedValue<DeepPartial<TFieldValues>>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const fieldArrayDefaultValuesRef = React.useRef<\n    Record<InternalFieldName<FieldValues>, unknown[]>\n  >({});\n  const watchFieldsRef = React.useRef<InternalNameSet<TFieldValues>>(new Set());\n  const useWatchFieldsRef = React.useRef<\n    Record<string, InternalNameSet<TFieldValues>>\n  >({});\n  const useWatchRenderFunctionsRef = React.useRef<Record<string, () => void>>(\n    {},\n  );\n  const fieldsWithValidationRef = React.useRef<\n    FieldNamesMarkedBoolean<TFieldValues>\n  >({});\n  const validFieldsRef = React.useRef<FieldNamesMarkedBoolean<TFieldValues>>(\n    {},\n  );\n  const defaultValuesRef = React.useRef<DefaultValues<TFieldValues>>(\n    defaultValues,\n  );\n  const defaultValuesAtRenderRef = React.useRef<\n    Partial<DefaultValues<TFieldValues>>\n  >({});\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const shallowFieldsStateRef = React.useRef(\n    shouldUnregister ? {} : { ...defaultValues },\n  );\n  const resetFieldArrayFunctionRef = React.useRef<\n    Record<\n      InternalFieldName<FieldValues>,\n      (data?: UnpackNestedValue<DeepPartial<TFieldValues>>) => void\n    >\n  >({});\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<InternalNameSet<TFieldValues>>(\n    new Set(),\n  );\n  const modeRef = React.useRef(modeChecker(mode));\n  const { isOnSubmit, isOnTouch } = modeRef.current;\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touched: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touched: !isProxyEnabled || isOnTouch,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n  const observerRef = React.useRef<MutationObserver | undefined>();\n  const {\n    isOnBlur: isReValidateOnBlur,\n    isOnChange: isReValidateOnChange,\n  } = React.useRef(modeChecker(reValidateMode)).current;\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n  formStateRef.current = formState;\n\n  const updateFormState = React.useCallback(\n    (state: Partial<FormState<TFieldValues>> = {}) =>\n      !isUnMount.current &&\n      setFormState({\n        ...formStateRef.current,\n        ...state,\n      }),\n    [],\n  );\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FieldError | undefined,\n      shouldRender: boolean | null = false,\n      state: {\n        dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        isErrorStateChanged<TFieldValues>({\n          errors: formStateRef.current.errors,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(formStateRef.current.errors, name);\n\n      if (error) {\n        unset(validFieldsRef.current, name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !deepEqual(previousError, error, true);\n        set(formStateRef.current.errors, name, error);\n      } else {\n        if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n          set(validFieldsRef.current, name, true);\n          shouldReRender = shouldReRender || previousError;\n        }\n        unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (shouldReRender && !isNullOrUndefined(shouldRender)) ||\n        !isEmptyObject(state)\n      ) {\n        updateFormState({\n          ...state,\n          errors: formStateRef.current.errors,\n          ...(resolverRef.current ? { isValid: !!isValid } : {}),\n        });\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      name: string,\n      rawValue:\n        | FieldValue<TFieldValues>\n        | UnpackNestedValue<DeepPartial<TFieldValues>>\n        | string[]\n        | undefined\n        | null\n        | boolean,\n    ) => {\n      const { ref, options } = fieldsRef.current[name] as Field;\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref) && options) {\n        options.forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string[]).includes(\n              selectRef.value,\n            )),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = isArray(value)\n                  ? !!(value as []).find(\n                      (data: string) => data === checkboxRef.value,\n                    )\n                  : value === checkboxRef.value),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const isFormDirty = () =>\n    !deepEqual(\n      getValues(),\n      isEmptyObject(defaultValuesRef.current)\n        ? defaultValuesAtRenderRef.current\n        : defaultValuesRef.current,\n    ) || !isEmptyObject(formStateRef.current.dirtyFields);\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      shouldRender = true,\n    ): {\n      dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    } => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const isFieldDirty =\n          get(defaultValuesAtRenderRef.current, name) !==\n          getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n        const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n        const previousIsDirty = formStateRef.current.isDirty;\n\n        isFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n\n        const state = {\n          isDirty: isFormDirty(),\n          dirtyFields: formStateRef.current.dirtyFields,\n        };\n\n        const isChanged =\n          (readFormStateRef.current.isDirty &&\n            previousIsDirty !== state.isDirty) ||\n          (readFormStateRef.current.dirtyFields &&\n            isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n        if (isChanged && shouldRender) {\n          formStateRef.current = {\n            ...formStateRef.current,\n            ...state,\n          };\n          updateFormState({\n            ...state,\n          });\n        }\n\n        return isChanged ? state : {};\n      }\n\n      return {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      if (fieldsRef.current[name]) {\n        const error = (\n          await validateField<TFieldValues>(\n            fieldsRef,\n            isValidateAllFieldCriteria,\n            fieldsRef.current[name] as Field,\n            shallowFieldsStateRef,\n          )\n        )[name];\n\n        shouldRenderBaseOnError(name, error, skipReRender);\n\n        return isUndefined(error);\n      }\n\n      return false;\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      names:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues(),\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = formStateRef.current.isValid;\n\n      if (isArray(names)) {\n        const isInputsValid = names\n          .map((name) => {\n            const error = get(errors, name);\n\n            error\n              ? set(formStateRef.current.errors, name, error)\n              : unset(formStateRef.current.errors, name);\n\n            return !error;\n          })\n          .every(Boolean);\n\n        updateFormState({\n          isValid: isEmptyObject(errors),\n          errors: formStateRef.current.errors,\n        });\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, names);\n\n        shouldRenderBaseOnError(\n          names,\n          error,\n          previousFormIsValid !== isEmptyObject(errors),\n          {},\n          isEmptyObject(errors),\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (isArray(fields)) {\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, null)),\n        );\n        updateFormState();\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields, readFormStateRef.current.isValid);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    <T extends string, U extends object | unknown[]>(\n      name: T,\n      value: U,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      const data = {};\n      set(data, name, value);\n\n      for (const fieldName of getPath(name, value)) {\n        if (fieldsRef.current[fieldName]) {\n          setFieldValue(fieldName, get(data, fieldName));\n          shouldDirty && updateAndGetDirtyState(fieldName);\n          shouldValidate && trigger(fieldName as FieldName<TFieldValues>);\n        }\n      }\n    },\n    [trigger, setFieldValue, updateAndGetDirtyState],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      value: FieldValue<TFieldValues> | null | undefined | boolean,\n      config: SetValueConfig = {},\n    ) => {\n      if (fieldsRef.current[name]) {\n        setFieldValue(name, value);\n        config.shouldDirty && updateAndGetDirtyState(name);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n\n        if (fieldArrayNamesRef.current.has(name)) {\n          fieldArrayDefaultValuesRef.current[name] = value;\n          resetFieldArrayFunctionRef.current[name]({\n            [name]: value,\n          } as UnpackNestedValue<DeepPartial<TFieldValues>>);\n\n          if (\n            readFormStateRef.current.isDirty ||\n            readFormStateRef.current.dirtyFields\n          ) {\n            set(\n              formStateRef.current.dirtyFields,\n              name,\n              setFieldArrayDirtyFields(\n                value,\n                get(defaultValuesRef.current, name, []),\n                get(formStateRef.current.dirtyFields, name, []),\n              ),\n            );\n\n            updateFormState({\n              isDirty: !deepEqual(\n                { ...getValues(), [name]: value },\n                defaultValuesRef.current,\n              ),\n              dirtyFields: formStateRef.current.dirtyFields,\n            });\n          }\n        }\n      }\n\n      !shouldUnregister && set(shallowFieldsStateRef.current, name, value);\n    },\n    [updateAndGetDirtyState, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = (name: string) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = (name: string, found = true): boolean => {\n    if (!isEmptyObject(useWatchFieldsRef.current)) {\n      for (const key in useWatchFieldsRef.current) {\n        if (\n          !name ||\n          !useWatchFieldsRef.current[key].size ||\n          useWatchFieldsRef.current[key].has(name) ||\n          useWatchFieldsRef.current[key].has(getFieldArrayParentName(name))\n        ) {\n          useWatchRenderFunctionsRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    value: TFieldValue extends NestedValue<infer U>\n      ? U\n      : UnpackNestedValue<DeepPartial<LiteralToPrimitive<TFieldValue>>>,\n    config?: SetValueConfig,\n  ): void {\n    setInternalValue(name, value as TFieldValues[string], config);\n\n    isFieldWatched(name) && updateFormState();\n    renderWatchedInputs(name);\n    (config || {}).shouldValidate && trigger(name as any);\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        const name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error;\n        let isValid;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation = skipValidation({\n            isBlurEvent,\n            isReValidateOnChange,\n            isReValidateOnBlur,\n            isTouched: !!get(formStateRef.current.touched, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            ...modeRef.current,\n          });\n          let state = updateAndGetDirtyState(name, false);\n          let shouldRender = !isEmptyObject(state) || isFieldWatched(name);\n\n          if (\n            isBlurEvent &&\n            !get(formStateRef.current.touched, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(formStateRef.current.touched, name, true);\n            state = {\n              ...state,\n              touched: formStateRef.current.touched,\n            };\n          }\n\n          if (shouldSkipValidation) {\n            renderWatchedInputs(name);\n            return (\n              (!isEmptyObject(state) ||\n                (shouldRender && isEmptyObject(state))) &&\n              updateFormState(state)\n            );\n          }\n\n          if (resolverRef.current) {\n            const { errors } = await resolverRef.current(\n              getValues(),\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = formStateRef.current.isValid;\n\n            error = get(errors, name);\n\n            isValid = isEmptyObject(errors);\n\n            if (previousFormIsValid !== isValid) {\n              shouldRender = true;\n            }\n          } else {\n            error = (\n              await validateField<TFieldValues>(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              )\n            )[name];\n          }\n\n          renderWatchedInputs(name);\n          shouldRenderBaseOnError(name, error, shouldRender, state, isValid);\n        }\n      };\n\n  function setFieldArrayDefaultValues<T extends FieldValues>(data: T): T {\n    if (!shouldUnregister) {\n      for (const value of fieldArrayNamesRef.current) {\n        if (isKey(value) && !data[value]) {\n          data = {\n            ...data,\n            [value]: [],\n          };\n        }\n      }\n    }\n    return data;\n  }\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, shallowFieldsStateRef);\n    }\n\n    if (isArray(payload)) {\n      const data = {};\n\n      for (const name of payload) {\n        set(data, name, getFieldValue(fieldsRef, name, shallowFieldsStateRef));\n      }\n\n      return data;\n    }\n\n    return setFieldArrayDefaultValues(\n      getFieldsValues(fieldsRef, shallowFieldsStateRef),\n    );\n  }\n\n  const validateResolver = React.useCallback(\n    async (values = {}) => {\n      const { errors } = await resolverRef.current!(\n        {\n          ...defaultValuesRef.current,\n          ...getValues(),\n          ...values,\n        },\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const isValid = isEmptyObject(errors);\n\n      formStateRef.current.isValid !== isValid &&\n        updateFormState({\n          isValid,\n        });\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) =>\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        shallowFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      ),\n    [shouldUnregister],\n  );\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field: Field | undefined, forceDelete?: boolean) => {\n      if (field) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister && !filterOutFalsy(field.options || []).length) {\n          unset(defaultValuesAtRenderRef.current, field.ref.name);\n          unset(validFieldsRef.current, field.ref.name);\n          unset(fieldsWithValidationRef.current, field.ref.name);\n          unset(formStateRef.current.errors, field.ref.name);\n          set(formStateRef.current.dirtyFields, field.ref.name, true);\n\n          updateFormState({\n            errors: formStateRef.current.errors,\n            isDirty: isFormDirty(),\n            dirtyFields: formStateRef.current.dirtyFields,\n          });\n\n          resolverRef.current && validateResolver();\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    name &&\n      (isArray(name) ? name : [name]).forEach((inputName) =>\n        fieldsRef.current[inputName]\n          ? isKey(inputName)\n            ? delete formStateRef.current.errors[inputName]\n            : set(formStateRef.current.errors, inputName, undefined)\n          : unset(formStateRef.current.errors, inputName),\n      );\n\n    updateFormState({\n      errors: name ? formStateRef.current.errors : {},\n    });\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption): void {\n    const ref = (fieldsRef.current[name] || {})!.ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    updateFormState({\n      isValid: false,\n      errors: formStateRef.current.errors,\n    });\n\n    error.shouldFocus && ref && ref.focus && ref.focus();\n  }\n\n  const watchInternal = React.useCallback(\n    (\n      fieldNames?: string | string[],\n      defaultValue?: unknown,\n      watchId?: string,\n    ) => {\n      const watchFields = watchId\n        ? useWatchFieldsRef.current[watchId]\n        : watchFieldsRef.current;\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n      const fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        shallowFieldsStateRef,\n        false,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(defaultValue)\n            ? get(combinedDefaultValues, fieldNames)\n            : (defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>),\n          true,\n        );\n      }\n\n      if (isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      isWatchAllRef.current = isUndefined(watchId);\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[],\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    for (const fieldName of isArray(name) ? name : [name]) {\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true);\n    }\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    validateOptions: ValidationRules | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn(\n          '📋 Field is missing `name` attribute',\n          ref,\n          `https://react-hook-form.com/api#useForm`,\n        );\n      }\n\n      if (\n        fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\n        !RegExp(\n          `^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+].\\\\w+`\n            .replace(/\\[/g, '\\\\[')\n            .replace(/\\]/g, '\\\\]'),\n        ).test(ref.name)\n      ) {\n        return console.warn(\n          '📋 `name` prop should be in object shape: name=\"test[index].name\"',\n          ref,\n          'https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...validateOptions,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n    const compareRef = (currentRef: Ref) =>\n      isWeb && (!isHTMLElement(ref) || currentRef === ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? isArray(field.options) &&\n          filterOutFalsy(field.options).find((option) => {\n            return value === option.ref.value && compareRef(option.ref);\n          })\n        : compareRef(field.ref))\n    ) {\n      fields[name] = {\n        ...field,\n        ...validateOptions,\n      };\n      return;\n    }\n\n    if (type) {\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...filterOutFalsy((field && field.options) || []),\n              {\n                ref,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...validateOptions,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(shallowFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : shallowFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(name, defaultValue);\n      }\n    }\n\n    if (!isEmptyObject(validateOptions)) {\n      set(fieldsWithValidationRef.current, name, true);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          shallowFieldsStateRef,\n        ).then((error: FieldErrors) => {\n          const previousFormIsValid = formStateRef.current.isValid;\n\n          isEmptyObject(error)\n            ? set(validFieldsRef.current, name, true)\n            : unset(validFieldsRef.current, name);\n\n          if (previousFormIsValid !== isEmptyObject(error)) {\n            updateFormState();\n          }\n        });\n      }\n    }\n\n    if (\n      !defaultValuesAtRenderRef.current[name] &&\n      !(isFieldArray && isEmptyDefaultValue)\n    ) {\n      const fieldValue = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n      set(\n        defaultValuesAtRenderRef.current,\n        name,\n        isEmptyDefaultValue\n          ? isObject(fieldValue)\n            ? { ...fieldValue }\n            : fieldValue\n          : defaultValue,\n      );\n      !isFieldArray && unset(formStateRef.current.dirtyFields, name);\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    rules?: ValidationRules,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrValidationOptions?:\n      | FieldName<TFieldValues>\n      | ValidationRules\n      | (TFieldElement & Ref)\n      | null,\n    rules?: ValidationRules,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrValidationOptions)) {\n        registerFieldRef({ name: refOrValidationOptions }, rules);\n      } else if (\n        isObject(refOrValidationOptions) &&\n        'name' in refOrValidationOptions\n      ) {\n        registerFieldRef(refOrValidationOptions, rules);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrValidationOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      onValid: SubmitHandler<TSubmitFieldValues>,\n      onInvalid?: SubmitErrorHandler<TFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues = setFieldArrayDefaultValues(\n        getFieldsValues(fieldsRef, shallowFieldsStateRef, true),\n      );\n\n      if (readFormStateRef.current.isSubmitting) {\n        updateFormState({\n          isSubmitting: true,\n        });\n      }\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          formStateRef.current.errors = errors;\n          fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const {\n                ref: { name },\n              } = field;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                unset(validFieldsRef.current, name);\n              } else if (get(fieldsWithValidationRef.current, name)) {\n                unset(formStateRef.current.errors, name);\n                set(validFieldsRef.current, name, true);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(formStateRef.current.errors).every(\n            (name) => name in fieldsRef.current,\n          )\n        ) {\n          updateFormState({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          formStateRef.current.errors = {\n            ...formStateRef.current.errors,\n            ...fieldErrors,\n          };\n          onInvalid && (await onInvalid(fieldErrors, e));\n          shouldFocusError && focusOnErrorField(fieldsRef.current, fieldErrors);\n        }\n      } finally {\n        updateFormState({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n          errors: formStateRef.current.errors,\n          submitCount: formStateRef.current.submitCount + 1,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    if (!isValid) {\n      validFieldsRef.current = {};\n      fieldsWithValidationRef.current = {};\n    }\n\n    defaultValuesAtRenderRef.current = {};\n    fieldArrayDefaultValuesRef.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n\n    updateFormState({\n      submitCount: submitCount ? formStateRef.current.submitCount : 0,\n      isDirty: isDirty ? formStateRef.current.isDirty : false,\n      isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,\n      isValid: isValid ? formStateRef.current.isValid : false,\n      dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},\n      touched: touched ? formStateRef.current.touched : {},\n      errors: errors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const reset = (\n    values?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n\n    defaultValuesRef.current = { ...(values || defaultValuesRef.current) };\n\n    if (values) {\n      renderWatchedInputs('');\n    }\n\n    shallowFieldsStateRef.current = shouldUnregister ? {} : { ...values } || {};\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    resetRefs(omitResetState);\n  };\n\n  observerRef.current =\n    observerRef.current || !isWeb\n      ? observerRef.current\n      : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);\n\n  React.useEffect(() => {\n    isUnMount.current = false;\n    resolver && readFormStateRef.current.isValid && validateResolver();\n\n    return () => {\n      isUnMount.current = true;\n      observerRef.current && observerRef.current.disconnect();\n      shallowFieldsStateRef.current = {};\n\n      if (process.env.NODE_ENV !== 'production') {\n        return;\n      }\n\n      fieldsRef.current &&\n        Object.values(fieldsRef.current).forEach((field) =>\n          removeFieldEventListenerAndRef(field, true),\n        );\n    };\n  }, [removeFieldEventListenerAndRef]);\n\n  if (!resolver && readFormStateRef.current.isValid) {\n    formState.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors);\n  }\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [setInternalValue, trigger]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n  };\n\n  const control = {\n    renderWatchedInputs,\n    shouldUnregister,\n    removeFieldEventListener,\n    watchInternal,\n    mode: modeRef.current,\n    reValidateMode: {\n      isReValidateOnBlur,\n      isReValidateOnChange,\n    },\n    fieldsRef,\n    isWatchAllRef,\n    watchFieldsRef,\n    resetFieldArrayFunctionRef,\n    useWatchFieldsRef,\n    useWatchRenderFunctionsRef,\n    fieldArrayDefaultValuesRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayNamesRef,\n    readFormStateRef,\n    formStateRef,\n    defaultValuesRef,\n    shallowFieldsStateRef,\n    updateFormState,\n    validateResolver: resolver ? validateResolver : undefined,\n    ...commonProps,\n  };\n\n  return {\n    watch,\n    control,\n    formState: isProxyEnabled\n      ? new Proxy(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (process.env.NODE_ENV !== 'production') {\n              if (prop === 'isValid' && isOnSubmit) {\n                console.warn(\n                  '📋 `formState.isValid` is applicable with `onTouched`, `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState',\n                );\n              }\n            }\n\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: formState.errors,\n    ...commonProps,\n  };\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues, FormProviderProps } from './types';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n","import isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\n\nexport default (event: any) =>\n  isPrimitive(event) ||\n  !isObject(event.target) ||\n  (isObject(event.target) && !event.type)\n    ? event\n    : isUndefined(event.target.value)\n    ? event.target.checked\n    : event.target.value;\n","import * as React from 'react';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport getInputValue from './logic/getInputValue';\nimport skipValidation from './logic/skipValidation';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport { useFormContext } from './useFormContext';\nimport { VALUE } from './constants';\nimport { Control } from './types';\nimport { ControllerProps } from './types';\n\nconst Controller = <\n  TAs extends\n    | React.ReactElement\n    | React.ComponentType<any>\n    | 'input'\n    | 'select'\n    | 'textarea',\n  TControl extends Control = Control\n>({\n  name,\n  rules,\n  as,\n  render,\n  defaultValue,\n  control,\n  onFocus,\n  ...rest\n}: ControllerProps<TAs, TControl>) => {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 Controller is missing `control` prop. https://react-hook-form.com/api#Controller',\n      );\n    }\n  }\n\n  const {\n    defaultValuesRef,\n    setValue,\n    register,\n    unregister,\n    trigger,\n    mode,\n    reValidateMode: { isReValidateOnBlur, isReValidateOnChange },\n    formStateRef: {\n      current: { isSubmitted, touched },\n    },\n    updateFormState,\n    readFormStateRef,\n    fieldsRef,\n    fieldArrayNamesRef,\n    shallowFieldsStateRef,\n  } = control || methods.control;\n  const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\n  const getInitialValue = () =>\n    !isUndefined(get(shallowFieldsStateRef.current, name)) && isNotFieldArray\n      ? get(shallowFieldsStateRef.current, name)\n      : isUndefined(defaultValue)\n      ? get(defaultValuesRef.current, name)\n      : defaultValue;\n  const [value, setInputStateValue] = React.useState(getInitialValue());\n  const valueRef = React.useRef(value);\n  const onFocusRef = React.useRef(onFocus);\n\n  const shouldValidate = (isBlurEvent?: boolean) =>\n    !skipValidation({\n      isBlurEvent,\n      isReValidateOnBlur,\n      isReValidateOnChange,\n      isSubmitted,\n      isTouched: !!get(touched, name),\n      ...mode,\n    });\n\n  const commonTask = ([event]: any[]) => {\n    const data = getInputValue(event);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  };\n\n  const registerField = React.useCallback(() => {\n    if (process.env.NODE_ENV !== 'production' && !name) {\n      return console.warn(\n        '📋 Field is missing `name` prop. https://react-hook-form.com/api#Controller',\n      );\n    }\n\n    if (fieldsRef.current[name]) {\n      fieldsRef.current[name] = {\n        ref: fieldsRef.current[name]!.ref,\n        ...rules,\n      };\n    } else {\n      register(\n        Object.defineProperty({ name, focus: onFocusRef.current }, VALUE, {\n          set(data) {\n            setInputStateValue(data);\n            valueRef.current = data;\n          },\n          get() {\n            return valueRef.current;\n          },\n        }),\n        rules,\n      );\n      if (isNotFieldArray && !get(defaultValuesRef.current, name)) {\n        setInputStateValue(getInitialValue());\n      }\n    }\n  }, [rules, name, register]);\n\n  React.useEffect(\n    () => () => {\n      !isNameInFieldArray(fieldArrayNamesRef.current, name) && unregister(name);\n    },\n    [unregister, name, fieldArrayNamesRef],\n  );\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (isUndefined(value)) {\n        console.warn(\n          `📋 ${name} is missing in the 'defaultValue' prop of either its Controller (https://react-hook-form.com/api#Controller) or useForm (https://react-hook-form.com/api#useForm)`,\n        );\n      }\n\n      if ((!as && !render) || (as && render)) {\n        console.warn(\n          `📋 ${name} Controller should use either the 'as' or 'render' prop, not both. https://react-hook-form.com/api#Controller`,\n        );\n      }\n\n      if (!isNotFieldArray && isUndefined(defaultValue)) {\n        console.warn(\n          '📋 Controller is missing `defaultValue` prop when using `useFieldArray`. https://react-hook-form.com/api#Controller',\n        );\n      }\n    }\n\n    registerField();\n  }, [registerField]);\n\n  React.useEffect(() => {\n    if (!fieldsRef.current[name]) {\n      registerField();\n      if (isNotFieldArray) {\n        setInputStateValue(getInitialValue());\n      }\n    }\n  });\n\n  const onBlur = () => {\n    if (readFormStateRef.current.touched && !get(touched, name)) {\n      set(touched, name, true);\n      updateFormState({\n        touched,\n      });\n    }\n\n    if (shouldValidate(true)) {\n      trigger(name);\n    }\n  };\n\n  const onChange = (...event: any[]) =>\n    setValue(name, commonTask(event), {\n      shouldValidate: shouldValidate(),\n      shouldDirty: true,\n    });\n\n  const props = {\n    ...rest,\n    onChange,\n    onBlur,\n    name,\n    value,\n  };\n\n  return as\n    ? React.isValidElement(as)\n      ? React.cloneElement(as, props)\n      : React.createElement(as as string, props as any)\n    : render\n    ? render({\n        onChange,\n        onBlur,\n        value,\n        name,\n      })\n    : null;\n};\n\nexport { Controller };\n"],"sourceRoot":""}