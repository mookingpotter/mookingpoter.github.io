{"version":3,"sources":["views/sets/ListView/Header/Filter.js","views/sets/ListView/Header/index.js","views/sets/ListView/Results/Sorting.js","views/sets/ListView/Results/SetCard.js","views/sets/ListView/Results/index.js","views/sets/ListView/Paging.js","components/dialog/DeleteConfirm.js","views/sets/ListView/index.js","utils/analytics.js","components/Page.js","hooks/useIsMountedRef.js","services/setsService.js","components/Label.js","components/BackToMainPageButton.js","components/PageName.js","components/MoreButton.js"],"names":["useStyles","makeStyles","theme","root","queryButton","marginLeft","spacing","marginRight","queryDivider","margin","queryCard","minHeight","borderRadius","padding","queryField","width","Filter","onSearch","className","rest","classes","t","useTranslation","TRANSLATE_NS","SETS","TRANSLATIONS","useState","inputValue","setInputValue","handleSearch","event","persist","Container","maxWidth","clsx","Card","Box","display","alignItems","TextField","fullWidth","onChange","target","value","size","label","Divider","orientation","flexItem","Hidden","smDown","Button","variant","color","onClick","only","IconButton","minWidth","height","background","palette","header","actionIcon","previousButton","textDecoration","titleRow","paddingTop","text","primary","addButton","addIconButton","searchWrapper","zIndex","drawer","marginTop","Header","Grid","container","justify","item","PageName","BackToMainPageButton","pt","component","RouterLink","to","flexWrap","justifyContent","breakpoints","up","sortByField","sortButton","textTransform","letterSpacing","displayItemCounts","Sorting","itemCounts","onSortChange","onModeChange","sortOptions","pagingService","sort","setSort","mode","setMode","Typography","name","select","SelectProps","native","map","option","key","mdDown","flexGrow","ToggleButtonGroup","exclusive","ToggleButton","defaultProps","withWidth","SetCard","loading","dataItem","set","onRemove","history","useHistory","settingButtons","translateKey","click","url","id","push","icon","CardHeader","title","Skeleton","animation","data-testid","action","MoreButton","buttonList","pb","px","style","marginBottom","description","py","Label","active","sortWrapper","Results","sets","limit","obj","index","uuidv4","md","sm","xs","Paging","page","count","onChangePage","onChangeRowsPerPage","pageOptions","PAGING","PAGE_OPTIONS","TablePagination","newPage","rowsPerPage","rowsPerPageOptions","labelRowsPerPage","nextIconButtonText","backIconButtonText","PAGE","PAGE_SIZES","dialogTitle","DeleteConfirmationDialog","props","onClose","open","getMessage","other","useTheme","fullScreen","useMediaQuery","down","React","useEffect","message","result","dialogId","Dialog","disableBackdropClick","disableEscapeKeyDown","aria-labelledby","DialogTitle","SvgIcon","fontSize","alignSelf","ml","DialogContent","dividers","DialogContentText","Trans","i18nKey","values","itemName","DialogActions","autoFocus","backgroundColor","default","content","SurgicalSetListView","isMounted","useIsMountedRef","setLoading","setSets","setPage","setLimit","query","setQuery","remove","setRemove","openDeleteConfirm","setOpenDeleteConfirm","currentDataItem","useRef","enqueueSnackbar","useSnackbar","confirmRemove","a","setsService","current","resultFlag","errorMessage","getList","getSetsFromApi","console","log","Page","data","mt","total","DeleteConfirm","isDelete","SplashScreen","track","window","gtag","pageview","process","type","forwardRef","ref","children","location","useLocation","sendPageViewEvent","useCallback","page_path","pathname","Helmet","getAll","Promise","resolve","reject","axios","get","then","response","catch","error","errors","getById","setId","params","errorCode","activityId","insert","post","update","updateEquipmentItems","equipmentItems","equipments","fontFamily","typography","whiteSpace","cursor","flexShrink","pxToRem","fontWeight","fontWeightMedium","main","fade","secondary","success","warning","prototype","PropTypes","string","memo","menu","moreRef","openMenu","setOpenMenu","anchorEl","anchorOrigin","vertical","horizontal","PaperProps","transformOrigin","btn","buttonItem","uid"],"mappings":"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","file":"static/js/16.8cf2583e.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport { useState } from 'react';\r\nimport {useTranslation} from \"react-i18next\";\r\nimport { TRANSLATE_NS } from 'src/constants';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  Container,\r\n  Divider,\r\n  TextField,\r\n  makeStyles,\r\n  Hidden,\r\n  IconButton\r\n} from '@material-ui/core';\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n  root: {},  \r\n  queryButton: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(3),\r\n  },\r\n  queryDivider: {\r\n    margin: theme.spacing(0, 3),\r\n  },\r\n  queryCard: {\r\n    minHeight: 60,\r\n    borderRadius: theme.spacing(1),\r\n    padding: theme.spacing(2),    \r\n  },\r\n  queryField: {\r\n    width: '95%',\r\n    marginLeft: theme.spacing(2),\r\n    marginRight: theme.spacing(1)\r\n  },\r\n}));\r\n\r\nfunction Filter({onSearch, className, ...rest}){\r\n  const classes = useStyles();\r\n  const {t} = useTranslation([TRANSLATE_NS.SETS, TRANSLATE_NS.TRANSLATIONS]);\r\n  const [inputValue, setInputValue] = useState('');\r\n  \r\n  const handleQueryChange = (event) => {\r\n    event.persist();\r\n    setInputValue(event.target.value);\r\n  }\r\n  const handleSearch = (event) => {\r\n    event.persist();\r\n    onSearch(inputValue);\r\n  }\r\n\r\n  return (\r\n    <Container \r\n      maxWidth=\"md\"\r\n      className={clsx(className, classes.root)}\r\n      {...rest}\r\n    >\r\n      <Card\r\n        className={classes.queryCard}\r\n      >\r\n        <Box\r\n          display=\"flex\"\r\n          alignItems=\"center\"\r\n        >\r\n          <TextField\r\n            fullWidth={true}\r\n            className={classes.queryField}              \r\n            onChange={handleQueryChange}\r\n            value={inputValue}              \r\n            size=\"small\"\r\n            label={t('sets:surgical type list search')}\r\n          />       \r\n          <Divider\r\n            orientation=\"vertical\"\r\n            flexItem\r\n            className={classes.queryDivider}\r\n          />\r\n          <Hidden smDown>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.queryButton}\r\n              //size=\"small\"\r\n              onClick={handleSearch}\r\n            >\r\n              <SearchIcon />\r\n              {t('translations:search')}\r\n            </Button>\r\n          </Hidden>\r\n          <Hidden only={[\"md\", \"lg\", \"xl\"]}>            \r\n            <IconButton \r\n              color=\"primary\"             \r\n              onClick={handleSearch}\r\n            >\r\n              <SearchIcon />\r\n            </IconButton>\r\n          </Hidden>\r\n        </Box>\r\n      </Card>\r\n    </Container>\r\n  );\r\n}\r\n\r\nFilter.propTypes = {\r\n  onSearch: PropTypes.func.isRequired,\r\n  className: PropTypes.string\r\n}\r\n\r\nexport default Filter;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport clsx from 'clsx';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Grid,\r\n  makeStyles,\r\n  Container,\r\n} from '@material-ui/core';\r\nimport AddCircleOutlineOutlinedIcon from \"@material-ui/icons/AddCircleOutlineOutlined\";\r\nimport { TRANSLATE_NS} from 'src/constants';\r\nimport { useTranslation } from 'react-i18next';\r\nimport BackToMainPageButton from 'src/components/BackToMainPageButton';\r\nimport PageName from 'src/components/PageName';\r\nimport Filter from './Filter';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    minWidth: '100%',\r\n    height: 130,\r\n    //background: theme.palette.backgroundHeader.backgroundImage\r\n    background: theme.palette.background.header\r\n  },\r\n  actionIcon: {\r\n    marginRight: theme.spacing(1)\r\n  },\r\n  previousButton: {\r\n    \"&:hover\": {\r\n      textDecoration: \"underline\",\r\n    },\r\n  },\r\n  titleRow: {\r\n    paddingTop: theme.spacing(1),\r\n    color: theme.palette.text.primary\r\n  },  \r\n  addButton: {\r\n\r\n  },\r\n  addIconButton: {\r\n    marginRight: theme.spacing(1)\r\n  },\r\n  searchWrapper: {\r\n    zIndex: theme.zIndex.drawer + 100,\r\n    marginTop: theme.spacing(1)\r\n  }\r\n}));\r\n\r\nfunction Header({ onSearch, className, ...rest }) {\r\n  const classes = useStyles();\r\n  const {t} = useTranslation([TRANSLATE_NS.TRANSLATIONS, TRANSLATE_NS.SETS]);\r\n\r\n  return (\r\n    <div \r\n      className={clsx(classes.root, className)}\r\n      {...rest}\r\n    >\r\n      <Container \r\n        maxWidth=\"md\"\r\n      >\r\n        <Grid\r\n          alignItems=\"center\"\r\n          container\r\n          justify=\"space-between\"\r\n          className={classes.titleRow}\r\n        >\r\n          <Grid item>\r\n            <PageName>\r\n              {t('sets:surgical instrument sets')}\r\n            </PageName>\r\n          </Grid>\r\n          <Grid item>\r\n            <BackToMainPageButton className={classes.previousButton} />\r\n          </Grid>\r\n        </Grid>\r\n        <Box pt={1} >\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            //onClick={handleAddNewItem}\r\n            className={classes.addButton}\r\n            size=\"small\"\r\n            component={RouterLink}\r\n            to=\"/sets/create\"\r\n          >\r\n            <AddCircleOutlineOutlinedIcon\r\n              className={classes.addIconButton}\r\n            />\r\n            {t('sets:add surgical instrument sets')}\r\n          </Button>\r\n        </Box>\r\n      </Container>\r\n      <Filter \r\n        onSearch={onSearch} \r\n        className={classes.searchWrapper}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nHeader.propTypes = {\r\n  onSearch: PropTypes.func,\r\n  className: PropTypes.string\r\n};\r\n\r\nexport default Header;","import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport {\r\n  Box,\r\n  makeStyles,\r\n  TextField,\r\n  Typography,\r\n  withWidth,\r\n  Hidden,\r\n} from '@material-ui/core';\r\nimport pagingService from 'src/services/pagingService';\r\nimport ViewModuleIcon from '@material-ui/icons/ViewModule';import {\r\n  ToggleButtonGroup,\r\n  ToggleButton,\r\n} from '@material-ui/lab';\r\nimport {TRANSLATE_NS} from 'src/constants';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nconst useStyles = makeStyles((theme)=> ({\r\n  root: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    flexWrap: 'wrap',    \r\n    justifyContent: \"center\",\r\n    [theme.breakpoints.up(\"md\")]: {   \r\n      justifyContent: \"space-between\",\r\n    },\r\n  },\r\n  sortByField: {\r\n    marginRight: theme.spacing(1)\r\n  },  \r\n  sortButton: {\r\n    textTransform: 'none',\r\n    letterSpacing: 0,\r\n    marginRight: theme.spacing(2)\r\n  },\r\n  displayItemCounts: {\r\n\r\n  }\r\n}));\r\n\r\nfunction Sorting({itemCounts, onSortChange, onModeChange, className, ...rest}){        \r\n  const classes = useStyles();\r\n  const {t} = useTranslation([TRANSLATE_NS.TRANSLATIONS, TRANSLATE_NS.SETS]);\r\n  const sortOptions = pagingService.sortOptions;  \r\n  const [sort, setSort] = useState(sortOptions[0].value);\r\n  const [mode, setMode] = useState('grid');\r\n\r\n  const handleSortChange = (event) => {\r\n    event.persist();\r\n    setSort(event.target.value);\r\n    onSortChange(event.target.value);\r\n  }\r\n  const handleModeChange = (event, value) => {\r\n    event.persist();\r\n    setMode(value);\r\n    onModeChange(value);\r\n  }\r\n  \r\n  return(\r\n    <Box\r\n      className={clsx(className, classes.root)}\r\n      {...rest}\r\n    >\r\n      <Hidden smDown>\r\n        <Box \r\n          display=\"flex\"\r\n          alignItems=\"center\"\r\n        >\r\n          <Typography\r\n            className={classes.displayItemCounts}\r\n            variant=\"h5\"\r\n            color=\"textPrimary\"\r\n          >\r\n            {`${t('translations:showing')} ${itemCounts} ${t('sets:surgical instrument sets')}`}\r\n          </Typography>\r\n        </Box>\r\n      </Hidden>\r\n      <Box\r\n        display=\"flex\"\r\n        alignItems=\"center\"\r\n      >\r\n        <TextField\r\n          label={t('translations:sort by')}\r\n          name=\"sort\"\r\n          onChange={handleSortChange}\r\n          select\r\n          SelectProps={{ native: true }}\r\n          value={sort}\r\n          variant=\"outlined\"\r\n          size=\"small\"\r\n          className={classes.sortByField}\r\n        >\r\n          {sortOptions.map((option) => (\r\n          <option\r\n              key={option.value}\r\n              value={option.value}\r\n          >\r\n              {option.label}\r\n          </option>\r\n          ))}\r\n        </TextField>\r\n        <Hidden\r\n          mdDown\r\n        >          \r\n          <Box flexGrow={1} />\r\n          <ToggleButtonGroup\r\n            exclusive\r\n            onChange={handleModeChange}\r\n            size=\"small\"\r\n            value={mode}\r\n          >\r\n            <ToggleButton value=\"grid\">\r\n              <ViewModuleIcon color=\"primary\"/>\r\n            </ToggleButton>\r\n          </ToggleButtonGroup>\r\n        </Hidden>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nSorting.propTypes = {   \r\n  itemCounts: PropTypes.number,\r\n  onSortChange: PropTypes.func, \r\n  onModeChange: PropTypes.func,\r\n  className: PropTypes.string,\r\n  width: PropTypes.oneOf([\"lg\", \"md\", \"sm\", \"xl\", \"xs\"]).isRequired,\r\n};\r\n\r\nSorting.defaultProps = {\r\n  itemCounts: 0,\r\n  onSortChange: () => {},\r\n  onModeChange: () => {},\r\n  className: ''\r\n};\r\n\r\nexport default withWidth()(Sorting);","import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport {\r\n  Box,\r\n  Card,\r\n  Button,\r\n  Grid,\r\n  Typography,\r\n  makeStyles,\r\n  CardHeader\r\n} from '@material-ui/core';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { TRANSLATE_NS } from 'src/constants';\r\nimport { Skeleton } from '@material-ui/lab';\r\nimport { Edit2 as EditIcon, Trash2 as DeleteIcon } from 'react-feather';\r\nimport Label from 'src/components/Label';\r\nimport MoreButton from 'src/components/MoreButton';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  root: {\r\n    minWidth: 178\r\n  }\r\n}));\r\n\r\nfunction SetCard({ loading, set: dataItem, onRemove, className, ...rest }) {\r\n  const classes = useStyles();\r\n  const {t} = useTranslation([TRANSLATE_NS.SETS, TRANSLATE_NS.TRANSLATIONS]);\r\n  const history = useHistory();\r\n\r\n  const settingButtons = [\r\n  {\r\n    translateKey: \"edit\",\r\n    click: () => {\r\n      const url = `/sets/${dataItem.id}`;\r\n      history.push(url);\r\n    },\r\n    icon: <EditIcon />\r\n  },\r\n  {\r\n    translateKey: \"delete\",\r\n    click: () => {\r\n      if(onRemove){\r\n        onRemove(dataItem);\r\n      }\r\n    },\r\n    icon: <DeleteIcon />\r\n  }\r\n  ];\r\n\r\n  const handleClickViewDetailsButton = (event) => {\r\n    event.persist();\r\n    const url = `/sets/details/${dataItem.id}`\r\n    history.push(url)\r\n  }\r\n\r\n  return (\r\n    <Card\r\n      className={clsx(classes.root, className)}\r\n      {...rest}\r\n    >\r\n      <CardHeader \r\n        title={\r\n          loading ? (\r\n            <Skeleton animation=\"wave\" variant=\"text\" data-testid=\"skeleton-title\"></Skeleton>\r\n          ) : (\r\n            <Typography\r\n              color=\"textPrimary\"\r\n              variant=\"h3\"\r\n            >\r\n              {dataItem.name}\r\n            </Typography>\r\n          )\r\n        }\r\n        action={\r\n          loading ? null : (<MoreButton buttonList={settingButtons} />)\r\n        }\r\n      />\r\n      <Box\r\n        pb={1}\r\n        px={3}\r\n      >\r\n        {loading ? (\r\n          <div data-testid=\"skeleton-details\">\r\n            <Skeleton animation=\"wave\" height={15} style={{marginBottom: 6}} />\r\n            <Skeleton animation=\"wave\" height={10} width=\"80%\" style={{marginBottom: 6}} />\r\n            <Skeleton animation=\"wave\" height={10} width=\"80%\" style={{marginBottom: 6}} />\r\n            <Skeleton animation=\"wave\" height={10} width=\"90%\" />\r\n          </div>\r\n        ) : (\r\n          <Typography\r\n            color=\"textSecondary\"\r\n            variant=\"body2\"\r\n          >\r\n            {dataItem.description}\r\n          </Typography>\r\n        )\r\n        }\r\n      </Box>\r\n      <Box\r\n        py={2}\r\n        px={2}\r\n      >\r\n        <Grid\r\n          alignItems=\"center\"\r\n          container\r\n          justify=\"space-between\"\r\n          spacing={2}\r\n        >\r\n          <Grid item>\r\n            {loading ? (\r\n              <div data-testid=\"skeleton-view-details-button\">\r\n                <Skeleton animation=\"wave\" height={10} width=\"80%\" />\r\n              </div>\r\n              ) : (\r\n              <>\r\n              <Button\r\n                color=\"primary\"\r\n                onClick={handleClickViewDetailsButton}\r\n                variant=\"contained\"\r\n                size=\"small\"\r\n              >\r\n                {t('sets:view surgical type list')}\r\n              </Button>              \r\n              </>\r\n            )}\r\n          </Grid>\r\n          <Grid item>\r\n            {loading ? ( \r\n              <div data-testid=\"skeleton-mode-label\">\r\n                <Skeleton animation=\"wave\" height={10} width=\"80%\" />\r\n              </div>\r\n            ):(\r\n              <Label color={dataItem.active === true? \"success\": \"error\"}>\r\n                {dataItem.active === true ? t(\"translations:active\") : t(\"translations:inactive\")}\r\n              </Label>\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n    </Card>\r\n  );\r\n}\r\n\r\nSetCard.propTypes = {\r\n  className: PropTypes.string,\r\n  set: PropTypes.shape({\r\n    name: PropTypes.string,\r\n    description: PropTypes.string,\r\n    active: PropTypes.bool\r\n  }),\r\n  loading: PropTypes.bool,\r\n  onRemove: PropTypes.func\r\n};\r\n\r\nexport default SetCard;","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { v4 as uuidv4 } from 'uuid'\r\nimport clsx from 'clsx'\r\nimport {\r\n  makeStyles,\r\n  Grid\r\n} from '@material-ui/core'\r\nimport Sorting from './Sorting'\r\nimport SetCard from './SetCard'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {},\r\n  sortWrapper: {\r\n    marginBottom: theme.spacing(1)\r\n  }\r\n}))\r\n\r\nfunction Results({ \r\n  loading,\r\n  sets, \r\n  itemCounts,   \r\n  limit,\r\n  onSortChange,\r\n  onRemove,\r\n  className, \r\n  ...rest }) {\r\n\r\n  const classes = useStyles()\r\n  const [mode, setMode] = useState('grid')\r\n\r\n  const handleModeChange = (value) => {\r\n    setMode(value)\r\n  }\r\n\r\n  if(loading === true){\r\n    var obj = [] \r\n    for(var index = 0, total = 8; index < total; index++) \r\n      obj.push({ id: uuidv4() })\r\n\r\n    sets = [...obj]\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={clsx(classes.root, className)}\r\n      {...rest}\r\n    >\r\n      <Sorting \r\n        itemCounts={itemCounts}\r\n        onSortChange={onSortChange} \r\n        onModeChange={handleModeChange}\r\n        className={classes.sortWrapper}\r\n      />\r\n      <Grid\r\n        container\r\n        spacing={1}\r\n      >\r\n        {sets.map((set) => (\r\n          <Grid\r\n            item\r\n            key={set.id}\r\n            md={mode === 'grid' ? 3 : 12}\r\n            sm={mode === 'grid' ? 6 : 12}\r\n            xs={12}\r\n          >\r\n            <SetCard set={set} loading={loading} onRemove={onRemove} />\r\n          </Grid>\r\n        ))}\r\n      </Grid>      \r\n    </div>\r\n  )\r\n}\r\n\r\nResults.propTypes = {\r\n  loading: PropTypes.bool,\r\n  className: PropTypes.string,\r\n  itemCounts: PropTypes.number,\r\n  limit: PropTypes.number,\r\n  sets: PropTypes.array.isRequired,\r\n  onSortChange: PropTypes.func,\r\n  onRemove: PropTypes.func\r\n}\r\n\r\nResults.defaultProps = {\r\n  loading: true,\r\n  itemCounts: 0,\r\n  limit: 0,\r\n  sets: [],\r\n  onSortChange: () => {},\r\n  className: '',\r\n  onRemove: ()=> {}\r\n}\r\n\r\nexport default Results","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport {\r\n  Box,\r\n  makeStyles,\r\n  TablePagination,\r\n} from '@material-ui/core';\r\nimport {PAGING} from 'src/constants';\r\nimport {TRANSLATE_NS} from 'src/constants';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nconst useStyles = makeStyles((theme)=> ({\r\n  root: {}\r\n}));\r\n\r\nfunction Paging({\r\n  page,\r\n  limit,\r\n  count,\r\n  onChangePage,\r\n  onChangeRowsPerPage,\r\n  className, \r\n  ...rest}){\r\n        \r\n  const classes = useStyles();\r\n  const {t} = useTranslation([TRANSLATE_NS.TRANSLATIONS, TRANSLATE_NS.SETS]);\r\n  const pageOptions = PAGING.PAGE_OPTIONS;\r\n  \r\n  const handleLimitChange = (event) => {\r\n    event.persist();\r\n    onChangeRowsPerPage(event.target.value);\r\n  }\r\n  const handlePageChange = (event, newPage) => {\r\n    event.persist();\r\n    onChangePage(newPage);\r\n  }\r\n  return(\r\n    <Box\r\n      className={clsx(className, classes.root)}\r\n      {...rest}\r\n      \r\n      display=\"flex\"\r\n      justifyContent=\"center\"\r\n    >\r\n      <TablePagination\r\n        component=\"div\"\r\n        count={count}\r\n        onChangePage={handlePageChange}\r\n        onChangeRowsPerPage={handleLimitChange}\r\n        page={page}\r\n        rowsPerPage={limit}\r\n        rowsPerPageOptions={pageOptions}\r\n        labelRowsPerPage={t('translations:rows per page')}\r\n        nextIconButtonText={t('translations:next page')}\r\n        backIconButtonText={t('translations:previous page')}\r\n      />\r\n    </Box>\r\n  );\r\n}\r\n\r\nPaging.propTypes = {\r\n  page: PropTypes.number.isRequired,\r\n  limit: PropTypes.number.isRequired,\r\n  count: PropTypes.number.isRequired,\r\n  onChangePage: PropTypes.func.isRequired,\r\n  onChangeRowsPerPage: PropTypes.func.isRequired,\r\n  className: PropTypes.string\r\n};\r\n\r\nPaging.defaultProps = {\r\n  page: PAGING.PAGE,\r\n  limit: PAGING.PAGE_SIZES,\r\n  count: 0,\r\n  onChangePage: () => {},\r\n  onChangeRowsPerPage: () => {},\r\n  className: ''\r\n};\r\n\r\nexport default Paging;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { useTranslation, Trans } from 'react-i18next';\r\nimport { TRANSLATE_NS } from 'src/constants';\r\nimport Button from '@material-ui/core/Button';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport { DialogContentText, SvgIcon, useMediaQuery, Box } from '@material-ui/core';\r\nimport { Trash2 as DeleteIcon } from 'react-feather';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n\r\n  },\r\n  dialogTitle: {\r\n    \"& h2\": {\r\n      display: 'flex'\r\n    }\r\n  }\r\n}));\r\n\r\nfunction DeleteConfirmationDialog(props) {\r\n  const { onClose, open, getMessage, ...other } = props;\r\n  const theme = useTheme();\r\n  const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\r\n  const {t} = useTranslation([TRANSLATE_NS.TRANSLATIONS]);\r\n  const classes = useStyles();\r\n\r\n  React.useEffect(() => {\r\n    if (!open) {\r\n    }\r\n  }, [open]);\r\n\r\n  const handleCancel = () => {\r\n    onClose(false);\r\n  };\r\n\r\n  const handleOk = () => {\r\n    onClose(true);\r\n  };\r\n  \r\n  let message = \"\";\r\n  if(getMessage){\r\n    const result = getMessage();\r\n    if(result) message = result;\r\n  }\r\n\r\n  const dialogId = uuidv4();\r\n\r\n  return (\r\n    <Dialog\r\n      fullScreen={fullScreen}\r\n      disableBackdropClick\r\n      disableEscapeKeyDown\r\n      aria-labelledby={dialogId}\r\n      open={open}\r\n      {...other}\r\n    >\r\n      <DialogTitle id={dialogId} className={classes.dialogTitle}>\r\n        <SvgIcon>\r\n          <DeleteIcon fontSize=\"small\" />\r\n        </SvgIcon>\r\n        <Box \r\n          alignSelf=\"center\"\r\n          component=\"span\"\r\n          ml={1}\r\n        >\r\n          {t(\"translations:delete title dialog\")}\r\n        </Box>\r\n      </DialogTitle>\r\n      <DialogContent dividers>\r\n        <DialogContentText>\r\n          <Trans i18nKey=\"are you sure you want to remove\"values={{itemName: message}}></Trans>\r\n        </DialogContentText>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button autoFocus onClick={handleCancel} color=\"primary\">\r\n          {t(\"translations:cancel\")}\r\n        </Button>\r\n        <Button autoFocus onClick={handleOk} color=\"primary\">\r\n          {t(\"translations:yes\")}\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nDeleteConfirmationDialog.propTypes = {\r\n  onClose: PropTypes.func.isRequired,\r\n  open: PropTypes.bool.isRequired,\r\n  getMessage: PropTypes.func\r\n};\r\n\r\nexport default DeleteConfirmationDialog;","import React, { useEffect, useRef, useState } from 'react'\r\nimport {useTranslation} from \"react-i18next\"\r\nimport { TRANSLATE_NS } from 'src/constants'\r\nimport useIsMountedRef from 'src/hooks/useIsMountedRef'\r\nimport setsService from 'src/services/setsService'\r\nimport Page from 'src/components/Page'\r\nimport SplashScreen from 'src/components/SplashScreen'\r\nimport Header from './Header'\r\nimport Results from './Results'\r\nimport Paging from './Paging'\r\nimport {\r\n  Box,\r\n  Container,\r\n  makeStyles\r\n} from '@material-ui/core'\r\nimport { useSnackbar } from 'notistack'\r\nimport DeleteConfirmationDialog from 'src/components/dialog/DeleteConfirm'\r\n\r\nconst sortOptions = [\r\n{\r\n  value: 'name|asc',\r\n  label: 'Name (Ascending A to Z)'\r\n},\r\n{\r\n  value: 'name|desc', \r\n  label: 'Name (Descending Z to A)'\r\n}\r\n]\r\nconst useStyles = makeStyles((theme)=> ({\r\n  root: {\r\n    backgroundColor: theme.palette.background.default,\r\n  },\r\n  content:{\r\n    marginTop: 60\r\n  }\r\n}))\r\n\r\nfunction SurgicalSetListView(){\r\n  const classes = useStyles()\r\n  const {t} = useTranslation([TRANSLATE_NS.SETS, TRANSLATE_NS.TRANSLATIONS])\r\n  const isMounted = useIsMountedRef()\r\n  const [loading, setLoading] = useState(true)\r\n  const [sets, setSets] = useState(null)\r\n  //const [error, setError] = useState(null)\r\n  const [page, setPage] = useState(0)\r\n  const [sort, setSort] = useState(sortOptions[0].value)\r\n  const [limit, setLimit] = useState(8)\r\n  const [query, setQuery] = useState(\"\")\r\n  const [remove, setRemove] = useState(null)\r\n  const [openDeleteConfirm, setOpenDeleteConfirm] = useState(false)\r\n  const currentDataItem = useRef(null)\r\n  const { enqueueSnackbar } = useSnackbar()\r\n\r\n  const handleQueryChange = (value) => {   \r\n    setQuery(()=> value)\r\n  }\r\n\r\n  const handleSortChange = (value) => {  \r\n    setSort(()=> value)\r\n  }\r\n\r\n  const handlePageChange = (newPage) => { \r\n    setPage(() => newPage)\r\n  }\r\n\r\n  const handleLimitChange = (value) => {\r\n    setLimit(() => value)\r\n  }\r\n\r\n  const handleRemove = (dataItem) => {\r\n    currentDataItem.current = dataItem\r\n    setOpenDeleteConfirm(true)\r\n  }\r\n\r\n  const getMessage = () => {\r\n    if(currentDataItem.current)\r\n      return currentDataItem.current?.name\r\n    else\r\n      return null\r\n  }\r\n\r\n  const confirmRemove = async () => {\r\n    const result = await setsService.remove(currentDataItem.current)\r\n    setOpenDeleteConfirm(false)\r\n    if(!result || !result.resultFlag){\r\n      enqueueSnackbar(result?.errorMessage ?? \"Something is wrong.\", {\r\n        variant: 'error'\r\n      })\r\n      return\r\n    }\r\n\r\n    if(result.resultFlag){\r\n      enqueueSnackbar('Removed success!', {\r\n        variant: 'success'\r\n      })\r\n      \r\n      setRemove(()=> currentDataItem.current)\r\n    }\r\n  }\r\n\r\n  useEffect(()=> {\r\n    setLoading(true)\r\n    const getSetsFromApi = async () => {\r\n      try{        \r\n        const result = await setsService.getList(query, sort, page, limit)\r\n        if(!isMounted.current)\r\n          return\r\n\r\n        if(result.resultFlag){\r\n          setSets(result.value)\r\n        }\r\n        else{\r\n          //setError(result.errors)\r\n        }\r\n      }\r\n      catch(error){\r\n        //if(isMounted.current) setError(error.message)\r\n      }\r\n      finally {\r\n        if(isMounted.current) setLoading(false)\r\n      }\r\n    }\r\n    getSetsFromApi()\r\n  }, [query, sort, page, limit, remove, isMounted])\r\n\r\n\r\n  if(!sets){\r\n    return <SplashScreen />\r\n  }\r\n\r\n  console.log('-----------render-----------', sets)\r\n\r\n  return (\r\n    <Page\r\n      className={classes.root}\r\n      title={t(\"sets:surgical instrument sets\")}\r\n    >\r\n      <Header onSearch={handleQueryChange} />\r\n      <Container \r\n        maxWidth=\"lg\"\r\n        className={classes.content}\r\n      >\r\n        {sets && (   \r\n          <Box>      \r\n            <Results\r\n              loading={loading} \r\n              sets={sets.data}\r\n              itemCounts={limit}\r\n              onSortChange={handleSortChange}\r\n              onRemove={handleRemove}\r\n              limit={limit} \r\n            />\r\n            <Paging \r\n              mt={1}\r\n              page={page} \r\n              limit={limit} \r\n              count={sets.total}\r\n              onChangePage={handlePageChange}\r\n              onChangeRowsPerPage={handleLimitChange}\r\n            />\r\n          </Box>\r\n        )}\r\n        <DeleteConfirmationDialog \r\n          onClose={(isDelete) => {\r\n            if(isDelete){\r\n              confirmRemove()\r\n            }\r\n            else{\r\n              setOpenDeleteConfirm(false)\r\n            }\r\n          }}\r\n          open={openDeleteConfirm}\r\n          getMessage={getMessage}\r\n        />\r\n      </Container>\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default SurgicalSetListView","function track(...args) {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      return;\r\n    }\r\n  \r\n    if (!window.gtag) {\r\n      return;\r\n    }\r\n  \r\n    window.gtag(...args);\r\n  }\r\n  \r\n  function pageview(props) {\r\n    track('config', process.env.REACT_APP_GA_MEASUREMENT_ID, props);\r\n  }\r\n  \r\n  function event(type, props) {\r\n    track('event', type, props);\r\n  }\r\n  \r\n  export default {\r\n    pageview,\r\n    event\r\n  };\r\n","import React, {\r\n    forwardRef,\r\n    useEffect, useCallback\r\n  } from 'react';\r\n  import { Helmet } from 'react-helmet';\r\n  import { useLocation } from 'react-router';\r\n  import PropTypes from 'prop-types';\r\n  import track from 'src/utils/analytics';\r\n  \r\n  const Page = forwardRef(({\r\n    title,\r\n    children,\r\n    ...rest\r\n  }, ref) => {\r\n    const location = useLocation();\r\n  \r\n    const sendPageViewEvent = useCallback(() => {\r\n      track.pageview({\r\n        page_path: location.pathname\r\n      });\r\n    }, [location]);\r\n  \r\n    useEffect(() => {\r\n      sendPageViewEvent();\r\n    }, [sendPageViewEvent]);\r\n  \r\n    return (\r\n      <div\r\n        ref={ref}\r\n        {...rest}\r\n      >\r\n        <Helmet>\r\n          <title>Smart CSSD - {title}</title>\r\n        </Helmet>\r\n        {children}\r\n      </div>\r\n    );\r\n  });\r\n  \r\n  Page.propTypes = {\r\n    children: PropTypes.node,\r\n    title: PropTypes.string\r\n  };\r\n  \r\n  export default Page;\r\n  ","import { useRef, useEffect } from 'react';\r\n\r\nexport default function useIsMountedRef() {\r\n  const isMounted = useRef(true);\r\n\r\n  useEffect(() => () => {\r\n    isMounted.current = false;\r\n  }, []);\r\n\r\n  return isMounted;\r\n}\r\n","import axios from 'src/utils/axios'\r\n\r\nclass SetsService {\r\n\r\n  getAll = () => new Promise((resolve, reject) => {\r\n    axios.get('/api/sets')\r\n      .then((response)=> {\r\n        resolve(response.data)\r\n      })\r\n      .catch((error) => {\r\n        reject({data: [], total: 0, errors: error})\r\n      })\r\n  })\r\n\r\n  \r\n\r\n  getById = (setId) => new Promise((resolve, reject) => {\r\n    axios.get('/api/sets/getById', { params: { setId } })\r\n      .then((response) => {\r\n        if(!response){\r\n          reject({\r\n            resultFlag: false,\r\n            value: null,\r\n            errorCode: 'Something is wrong.',\r\n            errorMessage: `response is ${response}`,\r\n            activityId: null\r\n          })\r\n          return\r\n        }\r\n        resolve({\r\n          resultFlag: true,\r\n          value: response.data\r\n        })\r\n      })\r\n      .catch((error) => {\r\n        reject({\r\n          resultFlag: false,\r\n          value: null,\r\n          errorCode: 'Something is wrong.',\r\n          errorMessage: error.message,\r\n          activityId: null\r\n        })\r\n      })\r\n  })\r\n\r\n  getList = (query, sort, page, limit) => new Promise((resolve, reject) => {\r\n    axios.get('/api/sets/fetch', { params: { \r\n      query, sort, page, limit } \r\n    })\r\n      .then((response) => {\r\n        \r\n        if(!response){\r\n          reject({\r\n            resultFlag: false,\r\n            value: null,\r\n            errorCode: 'Something is wrong.',\r\n            errorMessage: `response is ${response}`,\r\n            activityId: null\r\n          })\r\n          return\r\n        }\r\n        resolve({\r\n          resultFlag: true,\r\n          value: response.data\r\n        })\r\n      })\r\n      .catch((error) => {\r\n        reject({\r\n          resultFlag: false,\r\n          value: null,\r\n          errorCode: 'Something is wrong.',\r\n          errorMessage: error.message,\r\n          activityId: null\r\n        })\r\n      })\r\n  })\r\n\r\n  insert = (dataItem) => new Promise((resolve, reject) => {\r\n    axios.post('/api/sets/new', dataItem)\r\n      .then((response)=> {\r\n        resolve(response.data)\r\n      })\r\n      .catch((error) => {\r\n        reject({\r\n          resultFlag: false, \r\n          value: null, \r\n          errorCode: 'Something is wrong.',\r\n          errorMessage: error.message,\r\n          activityId: null\r\n        })\r\n      })\r\n  })\r\n\r\n  update = (dataItem) => new Promise((resolve, reject) => {\r\n    axios.post('/api/sets/update', dataItem)\r\n    .then((response)=> {\r\n      resolve(response.data)\r\n    })\r\n    .catch((error) => {\r\n      reject({\r\n        resultFlag: false, \r\n        value: null, \r\n        errorCode: 'Something is wrong.',\r\n        errorMessage: error.message,\r\n        activityId: null\r\n      })\r\n    })\r\n  })\r\n\r\n  remove = (dataItem) => new Promise((resolve, reject) => {\r\n    axios.post('/api/sets/remove', {\r\n      ...dataItem\r\n    })\r\n    .then((response)=> {\r\n      resolve(response.data)\r\n    })\r\n    .catch((error) => {\r\n      reject({\r\n        resultFlag: false, \r\n        value: null, \r\n        errorCode: 'Something is wrong.',\r\n        errorMessage: error.message,\r\n        activityId: null\r\n      })\r\n    })\r\n  })\r\n\r\n  updateEquipmentItems = (id, equipmentItems) => new Promise((resolve, reject) => {\r\n    axios.post('/api/sets/update-equipments', {\r\n      id, \r\n      equipments: equipmentItems\r\n    })\r\n    .then((response)=> {\r\n      resolve(response.data)\r\n    })\r\n    .catch((error) => {\r\n      reject({\r\n        resultFlag: false, \r\n        value: null, \r\n        errorCode: 'Something is wrong.',\r\n        errorMessage: error.message,\r\n        activityId: null\r\n      })\r\n    })\r\n  })\r\n}\r\n\r\nconst setsService = new SetsService()\r\n\r\nexport default setsService","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport { fade, makeStyles } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        fontFamily: theme.typography.fontFamily,\r\n        alignItems: 'center',\r\n        borderRadius: 2,\r\n        display: 'inline-flex',\r\n        flexGrow: 0,\r\n        whiteSpace: 'nowrap',\r\n        cursor: 'default',\r\n        flexShrink: 0,\r\n        fontSize: theme.typography.pxToRem(12),\r\n        fontWeight: theme.typography.fontWeightMedium,\r\n        height: 20,\r\n        justifyContent: 'center',\r\n        letterSpacing: 0.5,\r\n        minWidth: 20,\r\n        padding: theme.spacing(0.5, 1),\r\n        textTransform: 'uppercase',\r\n    },\r\n    primary: {\r\n        color: theme.palette.primary.main,\r\n        backgroundColor: fade(theme.palette.primary.main, 0.08)\r\n    },\r\n    secondary: {\r\n        color: theme.palette.secondary.main,\r\n        backgroundColor: fade(theme.palette.secondary.main, 0.08)\r\n    },\r\n    error: {\r\n        color: theme.palette.error.main,\r\n        backgroundColor: fade(theme.palette.error.main, 0.08)\r\n    },\r\n    success: {\r\n        color: theme.palette.success.main,\r\n        backgroundColor: fade(theme.palette.success.main, 0.08)\r\n    },\r\n    warning: {\r\n        color: theme.palette.warning.main,\r\n        backgroundColor: fade(theme.palette.warning.main, 0.08)\r\n    }\r\n}));\r\n\r\nfunction Label({\r\n  className,\r\n  color,\r\n  children,\r\n  style,\r\n  ...rest\r\n}) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <span\r\n      className={\r\n        clsx(classes.root, {\r\n          [classes[color]]: color\r\n        }, className)\r\n      }\r\n      {...rest}\r\n    >\r\n      {children}\r\n    </span>\r\n  );\r\n}\r\n\r\nLabel.propTypes = {\r\n    children: PropTypes.node,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object,\r\n    color: PropTypes.oneOf(['primary', 'secondary', 'error', 'warning', 'success'])\r\n  };\r\n  \r\n  Label.defaultProps = {\r\n    className: '',\r\n    color: 'secondary'\r\n  };\r\n  \r\n  export default Label;  ","import React, { memo } from 'react'; \r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { TRANSLATE_NS } from 'src/constants';\r\nimport {useTranslation} from \"react-i18next\";\r\nimport {makeStyles, Button} from '@material-ui/core';\r\nimport clsx from 'clsx';\r\n\r\nconst useStyles = makeStyles((theme)=> ({\r\n  root: {\r\n    color: theme.palette.primary.title\r\n  }\r\n}));\r\n\r\nfunction BackToMainPageButton({className, ...rest}){\r\n  const classes = useStyles();\r\n  const {t} = useTranslation([TRANSLATE_NS.TRANSLATIONS]);\r\n\r\n  return (\r\n    <Button\r\n      component={RouterLink}\r\n      to=\"/\"\r\n      className={clsx(classes.root, className)}\r\n      {...rest}\r\n    >\r\n      {t('back to main page')}\r\n    </Button>\r\n  );\r\n}\r\n\r\nBackToMainPageButton.prototype = {\r\n  className: PropTypes.string\r\n}\r\n\r\nexport default memo(BackToMainPageButton);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport { makeStyles, Typography } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n  root: {\r\n    color: theme.palette.primary.title\r\n  }\r\n}));\r\n\r\nfunction PageName({children, className, ...rest}){\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Typography\r\n      variant=\"h3\"\r\n      className={clsx(className, classes.root)}\r\n      {...rest}\r\n    >\r\n      {children}\r\n    </Typography>\r\n  )\r\n}\r\n\r\nPageName.propTypes = {\r\n  children: PropTypes.node,\r\n  className: PropTypes.string\r\n};\r\n\r\nexport default PageName;\r\n","import React, {\r\n    useRef,\r\n    useState,\r\n    memo\r\n  } from 'react';\r\n  import PropTypes from 'prop-types';\r\n  import {\r\n    ListItemIcon,\r\n    ListItemText,\r\n    Tooltip,\r\n    IconButton,\r\n    Menu,\r\n    MenuItem,\r\n    makeStyles\r\n  } from '@material-ui/core';\r\nimport MoreIcon from '@material-ui/icons/MoreVert';\r\nimport { TRANSLATE_NS } from 'src/constants';\r\nimport {useTranslation} from \"react-i18next\";\r\nimport {uid} from \"react-uid\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  menu: {\r\n    //width: 160,\r\n    maxWidth: '100%'\r\n  }\r\n}));\r\n\r\nfunction MoreButton({ buttonList, ...rest }) {\r\n  const classes = useStyles();\r\n  const moreRef = useRef(null);\r\n  const [openMenu, setOpenMenu] = useState(false);\r\n  const {t} = useTranslation([TRANSLATE_NS.TRANSLATIONS])\r\n\r\n  const handleMenuOpen = () => {\r\n    setOpenMenu(true);\r\n  };\r\n\r\n  const handleMenuClose = () => {\r\n    setOpenMenu(false);\r\n  };\r\n\r\n  const handleItemClick = (buttonItem) => {\r\n    if(typeof buttonItem.click === \"function\") {\r\n      buttonItem.click();\r\n      setOpenMenu(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Tooltip title={t('translations:more options')}>\r\n        <IconButton\r\n          {...rest}\r\n          onClick={handleMenuOpen}\r\n          ref={moreRef}\r\n        >\r\n          <MoreIcon fontSize=\"small\" />\r\n        </IconButton>\r\n      </Tooltip>\r\n      <Menu\r\n        anchorEl={moreRef.current}\r\n        anchorOrigin={{\r\n          vertical: 'top',\r\n          horizontal: 'left'\r\n        }}\r\n        onClose={handleMenuClose}\r\n        open={openMenu}\r\n        PaperProps={{ className: classes.menu }}\r\n        transformOrigin={{\r\n          vertical: 'top',\r\n          horizontal: 'left'\r\n        }}\r\n      >\r\n        {\r\n          buttonList && buttonList.map((btn)=> {\r\n            return (\r\n              <MenuItem \r\n                onClick={()=> handleItemClick(btn)} \r\n                key={uid(btn)} \r\n                value={btn}\r\n              >\r\n                <ListItemIcon>\r\n                  {btn.icon}\r\n                </ListItemIcon>\r\n                <ListItemText primary={t(btn.translateKey)} />\r\n              </MenuItem>\r\n            );\r\n          })\r\n        }\r\n      </Menu>\r\n    </>\r\n  );\r\n}\r\n\r\nMoreButton.propTypes = {\r\n  className: PropTypes.string,\r\n  buttonList: PropTypes.array.isRequired\r\n};\r\n\r\nMoreButton.defaultProps = {\r\n  className: '',\r\n  buttonList: []\r\n};\r\n\r\nexport default memo(MoreButton);\r\n"],"sourceRoot":""}